{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Httpretty","body":"# HTTPretty\r\n> Version 0.5\r\n[![Build Status](https://secure.travis-ci.org/gabrielfalcao/HTTPretty.png)](http://travis-ci.org/gabrielfalcao/HTTPretty)\r\n\r\n# changes\r\n\r\n## version 0.5\r\n\r\n* supporting `https` (SSL'ed URLs)\r\n\r\n# What\r\n\r\nHTTPretty is a HTTP client mock library for Python 100% inspired on ruby's [FakeWeb](http://fakeweb.rubyforge.org/)\r\n\r\n# Motivation\r\n\r\nWhen building systems that access external resources such as RESTful\r\nwebservices, XMLRPC or even simple HTTP requests, we stumble in the\r\nproblem:\r\n\r\n    \"I'm gonna need to mock all those requests\"\r\n\r\nIt brings a lot of hassle, you will need to use a generic mocking\r\ntool, mess with scope and so on.\r\n\r\n## The idea behind HTTPretty (how it works)\r\n\r\nHTTPretty [monkey matches](http://en.wikipedia.org/wiki/Monkey_patch)\r\nPython's [socket](http://docs.python.org/library/socket.html) core\r\nmodule, reimplementing the HTTP protocol, by mocking requests and\r\nresponses.\r\n\r\nAs for it works in this way, you don't need to worry what http library\r\nyou're gonna use.\r\n\r\nHTTPretty will mock the response for you :) *(and also give you the latest requests so that you can check them)*\r\n\r\n# Usage\r\n\r\n## expecting a simple response body\r\n\r\n```python\r\nimport urllib2\r\nfrom httpretty import HTTPretty\r\n\r\ndef test_one():\r\n    HTTPretty.enable()  # enable HTTPretty so that it will monkey patch the socket module\r\n    HTTPretty.register_uri(HTTPretty.GET, \"http://yipit.com/\",\r\n                           body=\"Find the best daily deals\")\r\n\r\n    fd = urllib2.urlopen('http://yipit.com')\r\n    got = fd.read()\r\n    fd.close()\r\n\r\n    assert got == \"Find the best daily deals\"\r\n\r\n    HTTPretty.disable()  # disable afterwards, so that you will have no problems in coda that uses that socket module\r\n```\r\n\r\n## ohhhh, really? can that be easier?\r\n\r\n**YES** we've got a decorator\r\n\r\n```python\r\nimport requests\r\nfrom httpretty import HTTPretty, httprettified\r\n\r\n@httprettified\r\ndef test_one():\r\n    HTTPretty.register_uri(HTTPretty.GET, \"http://yipit.com/\",\r\n                           body=\"Find the best daily deals\")\r\n\r\n    response = requests.get('http://yipit.com')\r\n    assert response.text == \"Find the best daily deals\"\r\n```\r\n\r\nthe `@httprettified` is a short-hand decorator that wraps the\r\ndecorated function with HTTPretty.enable() and then calls\r\nHTTPretty.disable() right after.\r\n\r\n## mocking the status code\r\n\r\n```python\r\nimport json\r\nimport urllib2\r\nfrom httpretty import HTTPretty, httprettified\r\n\r\n@httprettified\r\ndef test_github_access():\r\n    HTTPretty.register_uri(HTTPretty.GET, \"http://github.com/\",\r\n                           body=\"here is the mocked body\",\r\n                           status=201)\r\n\r\n    fd = urllib2.urlopen('http://github.com')\r\n    got = fd.read()\r\n    fd.close()\r\n\r\n    assert got == \"here is the mocked body\"\r\n    assert fd.code == 201\r\n```\r\n\r\n## you can tell HTTPretty to return any HTTP headers you want\r\n\r\n**and all you need is to add keyword args in which the keys are always lower-cased and with underscores `_` instead of dashes `-`**\r\n\r\nFor example, let's say you want to mock that server returns `content-type`.\r\nTo do so, use the argument `content_type`, **all the keyword args are taken by HTTPretty and transformed in the RFC2616 equivalent name**.\r\n\r\n```python\r\nimport urllib2\r\n\r\nHTTPretty.register_uri(HTTPretty.GET, \"http://github.com/gabrielfalcao\",\r\n                       body='{\"success\": false}',\r\n                       status=500,\r\n                       content_type='text/json')\r\n\r\nfd = urllib2.urlopen('http://github.com/gabrielfalcao')\r\ngot = fd.read()\r\nfd.close()\r\n\r\nassert json.loads(got)['success'] is False\r\nassert fd.code == 500\r\n\r\n```\r\n\r\n\r\n## rotating responses\r\n\r\nsame URL, same request method, the first request return the first\r\nHTTPretty.Response, all the subsequent ones return the last (status\r\n202)\r\n\r\n```python\r\nimport urllib2\r\nfrom sure import expect\r\n\r\nHTTPretty.register_uri(HTTPretty.GET, \"http://github.com/gabrielfalcao/httpretty\",\r\n                       responses=[\r\n                           HTTPretty.Response(body=\"first response\", status=201),\r\n                           HTTPretty.Response(body='second and last response', status=202),\r\n                        ])\r\n\r\nrequest1 = urllib2.urlopen('http://github.com/gabrielfalcao/httpretty')\r\nbody1 = request1.read()\r\nrequest1.close()\r\n\r\nexpect(request1.code).to.equal(201)\r\nexpect(body1).to.equal('first response')\r\n\r\nrequest2 = urllib2.urlopen('http://github.com/gabrielfalcao/httpretty')\r\nbody2 = request2.read()\r\nrequest2.close()\r\n\r\nexpect(request2.code).to.equal(202)\r\nexpect(body2).to.equal('second and last response')\r\n\r\nrequest3 = urllib2.urlopen('http://github.com/gabrielfalcao/httpretty')\r\nbody3 = request3.read()\r\nrequest3.close()\r\nexpect(request3.code).to.equal(202)\r\nexpect(body3).to.equal('second and last response')\r\n```\r\n\r\n## expect for a response, and check the request got by the \"server\" to make sure it was fine.\r\n\r\n```python\r\nimport requests\r\nfrom sure import expect\r\nfrom httpretty import HTTPretty\r\n\r\n\r\nHTTPretty.register_uri(HTTPretty.POST, \"http://api.yipit.com/foo\",\r\n                       body='{\"repositories\": [\"HTTPretty\", \"lettuce\"]}')\r\n\r\nresponse = requests.post('http://api.yipit.com/foo',\r\n                        '{\"username\": \"gabrielfalcao\"}',\r\n                        headers={\r\n                            'content-type': 'text/json',\r\n                        })\r\n\r\nexpect(response.text).to.equal('{\"repositories\": [\"HTTPretty\", \"lettuce\"]}')\r\nexpect(HTTPretty.last_request.method).to.equal(\"POST\")\r\nexpect(HTTPretty.last_request.headers['content-type']).to.equal('text/json')\r\n```\r\n\r\n# Acknowledgements\r\n\r\n## caveats with the [requests](http://docs.python-requests.org/en/latest/) library\r\n\r\n### `forcing_headers` + `Content-Length`\r\n\r\nif you use the `forcing_headers` options make sure to add the header\r\n`Content-Length` otherwise the\r\n[requests](http://docs.python-requests.org/en/latest/) will try to\r\nload the response endlessly\r\n\r\n# Dependencies\r\n\r\nyou will need **ONLY** if you decide to contribute to HTTPretty which\r\nmeans you're gonna need run our test suite\r\n\r\n* [nose](http://code.google.com/p/python-nose/)\r\n* [sure](http://github.com/gabrielfalcao/sure/)\r\n* [httplib2](http://code.google.com/p/httplib2/)\r\n* [bolacha](http://github.com/gabrielfalcao/bolacha/)\r\n* [tornado](http://tornadoweb.org/)\r\n* [multiprocessing](http://code.google.com/p/python-multiprocessing/) **(only needed if you're running python < 2.6)**\r\n\r\n## Here is a oneliner\r\n\r\n### I know you want it :)\r\n\r\n```bash\r\npip install -r requirements.pip\r\n```\r\n\r\n# Contributing\r\n\r\n1. fork and clone the project\r\n2. install the dependencies above\r\n3. run the tests with make:\r\n```bash\r\nmake unit functional\r\n```\r\n4. hack at will\r\n5. commit, push etc\r\n6. send a pull request\r\n\r\n# License\r\n\r\n    <HTTPretty - HTTP client mock for Python>\r\n    Copyright (C) <2011>  Gabriel Falc√£o <gabriel@nacaolivre.org>\r\n\r\n    Permission is hereby granted, free of charge, to any person\r\n    obtaining a copy of this software and associated documentation\r\n    files (the \"Software\"), to deal in the Software without\r\n    restriction, including without limitation the rights to use,\r\n    copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n    copies of the Software, and to permit persons to whom the\r\n    Software is furnished to do so, subject to the following\r\n    conditions:\r\n\r\n    The above copyright notice and this permission notice shall be\r\n    included in all copies or substantial portions of the Software.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\r\n    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\n    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\r\n    OTHER DEALINGS IN THE SOFTWARE.\r\n","tagline":"HTTP client mocking tool for Python","google":""}